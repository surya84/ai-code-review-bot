// Code generated by MockGen. DO NOT EDIT.
// Source: adapter.go
//
// Generated by this command:
//
//	mockgen -source=adapter.go -destination=repository_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	models "code-reviewer-bot/internal/models"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockVcsRepository is a mock of VcsRepository interface.
type MockVcsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVcsRepositoryMockRecorder
	isgomock struct{}
}

// MockVcsRepositoryMockRecorder is the mock recorder for MockVcsRepository.
type MockVcsRepositoryMockRecorder struct {
	mock *MockVcsRepository
}

// NewMockVcsRepository creates a new mock instance.
func NewMockVcsRepository(ctrl *gomock.Controller) *MockVcsRepository {
	mock := &MockVcsRepository{ctrl: ctrl}
	mock.recorder = &MockVcsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVcsRepository) EXPECT() *MockVcsRepositoryMockRecorder {
	return m.recorder
}

// GetPRCommitID mocks base method.
func (m *MockVcsRepository) GetPRCommitID(ctx context.Context, owner, repo string, prNumber int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPRCommitID", ctx, owner, repo, prNumber)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPRCommitID indicates an expected call of GetPRCommitID.
func (mr *MockVcsRepositoryMockRecorder) GetPRCommitID(ctx, owner, repo, prNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPRCommitID", reflect.TypeOf((*MockVcsRepository)(nil).GetPRCommitID), ctx, owner, repo, prNumber)
}

// GetPRDiff mocks base method.
func (m *MockVcsRepository) GetPRDiff(ctx context.Context, owner, repo string, prNumber int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPRDiff", ctx, owner, repo, prNumber)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPRDiff indicates an expected call of GetPRDiff.
func (mr *MockVcsRepositoryMockRecorder) GetPRDiff(ctx, owner, repo, prNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPRDiff", reflect.TypeOf((*MockVcsRepository)(nil).GetPRDiff), ctx, owner, repo, prNumber)
}

// PostGeneralComment mocks base method.
func (m *MockVcsRepository) PostGeneralComment(ctx context.Context, owner, repo string, prNumber int, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostGeneralComment", ctx, owner, repo, prNumber, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostGeneralComment indicates an expected call of PostGeneralComment.
func (mr *MockVcsRepositoryMockRecorder) PostGeneralComment(ctx, owner, repo, prNumber, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostGeneralComment", reflect.TypeOf((*MockVcsRepository)(nil).PostGeneralComment), ctx, owner, repo, prNumber, body)
}

// PostReview mocks base method.
func (m *MockVcsRepository) PostReview(ctx context.Context, owner, repo string, prNumber int, comments []*models.Comment, commitID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostReview", ctx, owner, repo, prNumber, comments, commitID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostReview indicates an expected call of PostReview.
func (mr *MockVcsRepositoryMockRecorder) PostReview(ctx, owner, repo, prNumber, comments, commitID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostReview", reflect.TypeOf((*MockVcsRepository)(nil).PostReview), ctx, owner, repo, prNumber, comments, commitID)
}
